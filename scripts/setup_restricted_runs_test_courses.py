"""
Test data setup script for restricted runs spike.

1. First, reset the sqlite database if running this hyper-locally:

rm enterprise_catalog/default.db && python manage.py migrate && python manage.py shell

2. Then, run this script.

3. To cleanup the objects generated by this script, paste the entire script into a shell, then delete the objects:

all_objs = [
    catalog,
    catalog_query,
    catalog_2,
    catalog_query_2,
    course_pure,
    course_pure_run1,
    course_mixed,
    course_mixed_run1,
    course_mixed_run2,
    course_mixed_run3,
    restricted_course_mixed,
    restricted_course_mixed_2,
    course_unicorn,
    course_unicorn_run1,
    restricted_course_unicorn,
] + restricted_runs_allowed
for obj in all_objs:
    obj.delete()

"""

# Set up catalog and catalog query:
# =================================
from enterprise_catalog.apps.catalog.models import *
from enterprise_catalog.apps.catalog.tests.factories import *
catalog = (
    EnterpriseCatalog.objects.filter(uuid='0fa8c2e9-ba23-4749-86d9-0bfa84991490').first()
    or
    EnterpriseCatalogFactory(uuid='0fa8c2e9-ba23-4749-86d9-0bfa84991490')
)
catalog_query = catalog.catalog_query
catalog_2 = (
    EnterpriseCatalog.objects.filter(uuid='2fa8c2e9-ba23-4749-86d9-0bfa84991490').first()
    or
    EnterpriseCatalogFactory(uuid='2fa8c2e9-ba23-4749-86d9-0bfa84991490')
)
catalog_query_2 = catalog_2.catalog_query

# Set up pure course and runs:
# ===============================
course_pure = (
    ContentMetadata.objects.filter(content_key='course_pure').first()
    or
    ContentMetadataFactory(content_key='course_pure', content_type='course')
)
course_pure.catalog_queries.set([catalog_query])
course_pure_run1 = (
    ContentMetadata.objects.filter(content_key='course_pure_run1').first()
    or
    ContentMetadataFactory(
        content_key='course_pure_run1',
        content_type='courserun',
        parent_content_key=course_pure.content_key,
    )
)

# Set up mixed course and runs:
# ===============================
course_mixed = (
    ContentMetadata.objects.filter(content_key='course_mixed').first()
    or
    ContentMetadataFactory(content_key='course_mixed', content_type='course')
)
course_mixed.catalog_queries.set([catalog_query, catalog_query_2])
course_mixed_run1 = (
    ContentMetadata.objects.filter(content_key='course_mixed_run1').first()
    or
    ContentMetadataFactory(
        content_key='course_mixed_run1',
        content_type='courserun',
        parent_content_key=course_mixed.content_key,
    )
)
course_mixed_run2 = (
    ContentMetadata.objects.filter(content_key='course_mixed_run2').first()
    or
    ContentMetadataFactory(
        content_key='course_mixed_run2',
        content_type='courserun',
        parent_content_key=course_mixed.content_key,
    )
)
course_mixed_run3 = (
    ContentMetadata.objects.filter(content_key='course_mixed_run3').first()
    or
    ContentMetadataFactory(
        content_key='course_mixed_run3',
        content_type='courserun',
        parent_content_key=course_mixed.content_key,
    )
)
restricted_course_mixed, _ = RestrictedCourseMetadata.objects.get_or_create(
    content_key=course_mixed.content_key,
    content_type=course_mixed.content_type,
    catalog_query=catalog_query,
    unrestricted_parent=course_mixed,
    _json_metadata={'RESTRICTED': 'RESTRICTED_FOR_QUERY_1'},
)
restricted_runs_allowed = []
restricted_runs_allowed.append(RestrictedRunAllowedForRestrictedCourse.objects.get_or_create(
    course=restricted_course_mixed,
    run=course_mixed_run2,
)[0])
restricted_course_mixed_2, _ = RestrictedCourseMetadata.objects.get_or_create(
    content_key=course_mixed.content_key,
    content_type=course_mixed.content_type,
    catalog_query=catalog_query_2,
    unrestricted_parent=course_mixed,
    _json_metadata={'RESTRICTED': 'RESTRICTED_FOR_QUERY_2'},
)
restricted_runs_allowed.append(RestrictedRunAllowedForRestrictedCourse.objects.get_or_create(
    course=restricted_course_mixed_2,
    run=course_mixed_run3,
)[0])

# Set up unicorn course and runs:
# ===============================
course_unicorn = (
    ContentMetadata.objects.filter(content_key='course_unicorn').first()
    or
    ContentMetadataFactory(content_key='course_unicorn', content_type='course')
)
course_unicorn.catalog_queries.set([catalog_query])
course_unicorn_run1 = (
    ContentMetadata.objects.filter(content_key='course_unicorn_run1').first()
    or
    ContentMetadataFactory(
        content_key='course_unicorn_run1',
        content_type='courserun',
        parent_content_key=course_unicorn.content_key,
    )
)
restricted_course_unicorn, _ = RestrictedCourseMetadata.objects.get_or_create(
    content_key=course_unicorn.content_key,
    content_type=course_unicorn.content_type,
    catalog_query=catalog_query,
    unrestricted_parent=course_unicorn,
    _json_metadata={'RESTRICTED': 'RESTRICTED_FOR_QUERY_1'},
)
restricted_runs_allowed.append(RestrictedRunAllowedForRestrictedCourse.objects.get_or_create(
    course=restricted_course_unicorn,
    run=course_unicorn_run1,
)[0])

# Finally update the catalog query content filters to reflect the relationships
# =============================================================================
catalog_query.content_filter |= {
    'restricted_runs_allowed': {
        f'course:{course_mixed.content_key}': [course_mixed_run2.content_key],
        f'course:{course_unicorn.content_key}': [course_mixed_run1.content_key],
    },
}
catalog_query.save()
catalog_query_2.content_filter |= {
    'restricted_runs_allowed': {
        f'course:{course_mixed.content_key}': [course_mixed_run3.content_key],
    },
}
catalog_query_2.save()
